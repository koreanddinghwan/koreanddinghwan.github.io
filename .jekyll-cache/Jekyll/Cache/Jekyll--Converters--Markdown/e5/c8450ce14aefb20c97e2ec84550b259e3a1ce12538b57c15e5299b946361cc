I"?"<p>이 글은 개인적인 공부를 목적을 위한 글이며,<br />
모든 내용은 생활코딩님의 html수업에서 학습한 내용을 적은 것입니다.</p>

<h1 id="css">CSS</h1>

<h2 id="css-등장-이전의-상황">css 등장 이전의 상황</h2>

<p>html에 더욱 심미적 요소를 가미하기위한 언어.
사람들은 html자체에 심미적 요소를 추가하기 위해 디자인 태그를 넣었지만 곧 한계를 느끼고 css라는 언어를 새로이 만들게 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- &lt;font&gt;라는 태그가 이에 관한 태그이다. --&gt;
&lt;!-- ~&lt;font color="red"&gt;~&lt;/font&gt;~ --&gt;
</code></pre></div></div>

<p>font 태그를 이용하게 되면 우리는 정보와 디자인을 한 줄에 표현해야하고, 모든 줄을 하나하나 바꿔야하는 단점이 존재한다.</p>

<p>css는 이를 극복하기 위한 언어.
<br />
<br /></p>

<h2 id="css-의-등장">css 의 등장</h2>

<p>css는 html과는 완전히 다른 언어이다. 
컴퓨터에게 html의 문법으로 css로 해석하라고 알려줘야한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;style&gt;

a {

color:red;

}

&lt;/style&gt;
</code></pre></div></div>

<p>위 태그는 모든 a태그의 색을 red로 바꾸라는 의미이다.
중복된 태그를 없앰으로써 정규화를 수행해 재사용성과 유지보수를 편리하게하자.
<br />
<br /></p>

<h2 id="속성의-기본">속성의 기본</h2>

<p>style=””
을 적으면 html 언어 안에서 속성 선언이 가능하다.
그리고 이 속성은 css의 값을 가져올 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;style&gt; ~ &lt;/style&gt; 이라는 태그는 속성을 부여할 대상이 필요한데,  이건 위에서 a { } 으로 생각하면되고, 선택자라고 부른다. 선택자에게 지정될 효과 color:red;를 효과라고 부르고 선언이라고한다.
</code></pre></div></div>

<p>효과를 지정할때는 항상 ;(세미콜론)으로 구분해줘야한다.
<br />
<br /></p>

<h2 id="css-속성을-스스로-알아내는-방법">css 속성을 스스로 알아내는 방법</h2>

<p>웹페이지 내의 모든 h1태그 글씨 크게하고 center로만들기</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h1 {

font-size:60px;
text-align:center;

}
</code></pre></div></div>

<p>css text size 등으로 검색해서 찾아내자.
<br />
<br /></p>

<h2 id="css-선택자를-스스로-알아내는-방법">Css 선택자를 스스로 알아내는 방법</h2>

<p>보라색:한번 방문했었다라는 의미
웹페이지의 모든 a태그를 검은색으로하고, 방문했었던 페이지는 회색으로 바꾸고, 현재 사용자가 머물고 있는 탭은 빨간색으로 표시를하고싶다.</p>

<p>about me 페이지를 기준으로
현재 탭은 빨간색, 나머지 탭은 회색이 되어야한다.</p>

<p>class=”saw”는 html의 문법인데, saw라는 class의 값을 가진 태그를 만들었고, 
saw라는 클래스값을 가진 모든 태그에 대해 color:gray;로주자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.saw {

color:gray;

}
</code></pre></div></div>

<p>이 방법은 그리 좋은 방법은 아닌데, 클래스 값은 띄어쓰기로 구분해 여러가지를 부여할 수 있고, 순서대로 적용된다. (가장 최근 명령값이 적용)</p>

<p>이를 극복하는게 id선택자이다.
id = “active”로 선언하고, 
    #active {</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>color:red;

} 를 하면 
</code></pre></div></div>

<p>#active가 설정된다.</p>

<p>선택자의 계층</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tag&lt;class&lt;id  로 계층이 형성된다, 동일 계층 사이에서는 가장 마지막의 선택자가 적용된다. 구체적인 것이 가장 우선순위가 높다고 생각하면된다. 
</code></pre></div></div>

<p>id의 값은 단 한번만 선언되어야한다. 
고유성(중복X) 값.
<br />
<br /></p>

<h2 id="css-box-model">Css box model</h2>

<p>h1태그는 줄바꿈은 하지만 a태그는 줄바꿈은 하지 않는다.
이를 시각적으로 보는방법이 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h1{
border-width:5px;
border-color:red;
border-style:solid;
}

a {
border-width:5px;
border-color:red;
border-style:solid;
}
</code></pre></div></div>

<p>h1처럼 화면 전체를 쓰는 태그를 block level element라고한다.(element는 태그와 같은 말)</p>

<p>a처럼 자기 자신의 크기만큼 가지는 태그는 inline element라고한다.</p>

<p>이러한 기본값은 
display:inline; 이나 display:block;으로 바꿀수도 있다.</p>

<p>display:none 은 해당 태그를 가진 것들을 모두 지워버릴수도있다.</p>

<p>위 h1과 a 선택자에 중복이 발생하고있는데 이를 바꾸면
    h1, a {
    border-width:5px;
    border-color:red;
    border-style:solid;
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>이고 또 줄이면
h1, a{

border:5px, red, solid 
}

padding:20px;
margin:0;
width:100px
</code></pre></div></div>

<p>padding은 content와 border사이 여백
margin은 border와 border사이 여백을 의미한다.
width는 border의 width를 의미.</p>

<p>웹페이지에서 검사버튼을 누르면 저 태그가 어떻게 생겨먹었는지 알 수 있다. 
<br />
<br /></p>

<h2 id="그리드의-기본-사용법">그리드의 기본 사용법</h2>

<p>목록과 본문이 나란히 위치하게하는 방법</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;head&gt;

&lt;style&gt;

div{

border:5px solid red

}

#grid{

border:5px solid gray

display:grid

grid-templete-columns:100px 1fr;

&lt;/style&gt;

&lt;/head&gt;

&lt;div id="gird"&gt;

&lt;div&gt;navigation&lt;/div&gt;

&lt;div&gt;article&lt;/div&gt;

&lt;/div&gt;
</code></pre></div></div>

<p>navigation과 article에 부모 div를 추가해 id를 부여한다.
div태그 선택자에 속성부여하고, grid id선택자에 속성을 부여한다. 
선택자는 id&gt;class&gt;tag 의 계층을 갖고있기에 div id=”grid”는 div의 영향을 받지 않는다.</p>

<p>부모태그 id 가 grid이므로 id선택자에 display:grid 를 선언하고, grid-templete-columns:100px 1fr;을 선언하게되면 자식 태그가 각각 100px와 1fr로 열이 나눠지게된다.
fr: frame의미.</p>

<p>grid-templete-columns가 좋은 건 칸에 맞춰 자동으로 줄바꿈이 된다는 것이다.</p>

<p>각 기능별로 어떤 브라우저의 어떤 버전 이상에서 사용할 수 있는지, 전세계 몇 %의 사람들이 이 기능을 인식할 수 있는지에 대해 알려주는 사이트이다.
<br />
<br /></p>

<h2 id="그리드-써먹기">그리드 써먹기</h2>

<p>—실습
<br />
<br /></p>

<h2 id="반응형-디자인과-미디어-쿼리-소개">반응형 디자인과 미디어 쿼리 소개</h2>

<p>화면의 크기에 따라 웹페이지의 각 요소가 반응해서 동작하게된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@media(max-width:800px){

div{

display:none;

}

}
</code></pre></div></div>

<p>max-width: 가로 너비 800px까지 아래 동작 실행</p>

<p>min-width:가로 너비 800px이상부터 아래 동작 실행</p>

<p>미디어 쿼리는 여러가지 형태의 화면이 존재하는 세상에서 굉장히 중요한 존재이다.
<br />
<br /></p>

<h2 id="css코드의-재사용">CSS코드의 재사용</h2>

<p>구조를 안정적으로 만들면 CSS코드를 쉽게 재사용할 수 있다.</p>

<p>하지만 매번 수정하는게 거의 불가능하다.
순수한 CSS(스타일 태그 내의 속성들)을 복사해서 .CSS로 별도의 파일로 만들 수 있는데, 
이후 이를 head태그 내 적용해서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet" href="style.css"&gt; 로 적용할 수 있다.
</code></pre></div></div>

<p>css파일을 만들어 적용하면 컴퓨터는 해시로 저장해 사용하기때문에 속도가 빠르다. 효율적이다.</p>
:ET